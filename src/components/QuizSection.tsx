import { useState } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";

interface Question {
  id: number;
  question: string;
  options: string[];
  points: number[];
}

const QuizSection = () => {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [score, setScore] = useState(0);
  const [answers, setAnswers] = useState<number[]>([]);
  const [showResult, setShowResult] = useState(false);

  const questions: Question[] = [
    {
      id: 1,
      question: "–ß—Ç–æ –º—ã –¥–µ–ª–∞–µ–º, –∫–æ–≥–¥–∞ –≤—Å—Ç—Ä–µ—á–∞–µ–º—Å—è?",
      options: [
        "–°—Ä–∞–∑—É –∏–¥—ë–º –µ—Å—Ç—å üçï",
        "–û–±—Å—É–∂–¥–∞–µ–º –º–µ–º—ã –ø–æ–ª—á–∞—Å–∞ üòÇ",
        "–ñ–∞–ª—É–µ–º—Å—è –Ω–∞ –∂–∏–∑–Ω—å üò≠",
        "–ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è ‚ú®",
      ],
      points: [2, 3, 1, 3],
    },
    {
      id: 2,
      question: "–ö–∞–∫–æ–π —É –Ω–∞—Å –æ–±—â–∏–π —Ç–∏–ø —é–º–æ—Ä–∞?",
      options: [
        "–ß—ë—Ä–Ω—ã–π –∫–∞–∫ –∫–æ—Ñ–µ ‚òï",
        "–ê–±—Å—É—Ä–¥–Ω—ã–π –∏ —Å—Ç—Ä–∞–Ω–Ω—ã–π ü§™",
        "–ú–µ–º—ã –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∫—É–ª—å—Ç—É—Ä–∞ üíª",
        "–°–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –∏ —É–º–Ω—ã–π üß†",
      ],
      points: [2, 3, 3, 2],
    },
    {
      id: 3,
      question: "–ö–∞–∫ –º—ã —Ä–µ—à–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã?",
      options: [
        "–ú–æ–ª—á–∏–º, –ø–æ–∫–∞ –Ω–µ –∑–∞–±—É–¥–µ–º üò∂",
        "–ì–æ–≤–æ—Ä–∏–º –ø—Ä—è–º–æ –∏ —á–µ—Å—Ç–Ω–æ üí¨",
        "–®—É—Ç–∏–º, –ø–æ–∫–∞ –Ω–µ –ø–æ–º–∏—Ä–∏–º—Å—è üòÑ",
        "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞—Å–∞–º–∏ ü§î",
      ],
      points: [1, 3, 3, 2],
    },
    {
      id: 4,
      question: "–ù–∞—à–∏ –≤—ã—Ö–æ–¥–Ω—ã–µ –æ–±—ã—á–Ω–æ –ø—Ä–æ—Ö–æ–¥—è—Ç:",
      options: [
        "–ó–∞ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ–º –∏ –∏—Å–∫—É—Å—Å—Ç–≤–æ–º üé®",
        "–í –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –∏ –∏–≥—Ä–∞—Ö üéÆ",
        "–ù–∞ –ø—Ä–æ–≥—É–ª–∫–∞—Ö –∏ –≤ –∫–∞—Ñ–µ ‚òï",
        "–î–æ–º–∞ –≤ –ø–∏–∂–∞–º–∞—Ö üè†",
      ],
      points: [3, 2, 2, 1],
    },
    {
      id: 5,
      question: "–ß—Ç–æ –Ω–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Å–≤—è–∑—ã–≤–∞–µ—Ç?",
      options: [
        "–û–±—â–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è üí≠",
        "–ü–æ—Ö–æ–∂–∏–π –≤–∑–≥–ª—è–¥ –Ω–∞ –º–∏—Ä üåç",
        "–í–∑–∞–∏–º–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ ü§ù",
        "–ë–µ–∑—É–º–Ω—ã–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è üé¢",
      ],
      points: [3, 2, 3, 2],
    },
  ];

  const handleAnswer = (answerIndex: number) => {
    const newAnswers = [...answers, answerIndex];
    setAnswers(newAnswers);
    setScore(score + questions[currentQuestion].points[answerIndex]);

    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
    } else {
      setShowResult(true);
    }
  };

  const resetQuiz = () => {
    setCurrentQuestion(0);
    setScore(0);
    setAnswers([]);
    setShowResult(false);
  };

  const getResultMessage = (score: number) => {
    if (score >= 13) {
      return {
        title: "–î—É—à–µ–≤–Ω—ã–µ –¥—Ä—É–∑—å—è! üíù",
        message:
          "–í—ã –∑–Ω–∞–µ—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –∫–∞–∫ —Å–µ–±—è! –í–∞—à–∞ –¥—Ä—É–∂–±–∞ ‚Äî —ç—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∏–π –∫–ª–∞–¥.",
        emoji: "üèÜ",
      };
    } else if (score >= 10) {
      return {
        title: "–û—Ç–ª–∏—á–Ω—ã–µ –¥—Ä—É–∑—å—è! üåü",
        message: "–£ –≤–∞—Å –∫—Ä–µ–ø–∫–∞—è –¥—Ä—É–∂–±–∞ —Å –æ–±—â–∏–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º.",
        emoji: "üéâ",
      };
    } else if (score >= 7) {
      return {
        title: "–•–æ—Ä–æ—à–∏–µ –ø—Ä–∏—è—Ç–µ–ª–∏! üòä",
        message: "–í—ã —Ö–æ—Ä–æ—à–æ –ª–∞–¥–∏—Ç–µ, –Ω–æ –µ—Å—Ç—å –µ—â—ë —á—Ç–æ —É–∑–Ω–∞—Ç—å –¥—Ä—É–≥ –æ –¥—Ä—É–≥–µ.",
        emoji: "üëã",
      };
    } else {
      return {
        title: "–ó–Ω–∞–∫–æ–º—ã–µ! ü§î",
        message: "–í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø—Ä–æ–≤–µ—Å—Ç–∏ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –≤–º–µ—Å—Ç–µ?",
        emoji: "üå±",
      };
    }
  };

  const result = getResultMessage(score);
  const progress = ((currentQuestion + 1) / questions.length) * 100;

  return (
    <section className="py-20 bg-gradient-to-br from-purple-50 to-pink-50">
      <div className="container mx-auto px-4 max-w-2xl">
        <div className="text-center mb-12">
          <h2 className="text-4xl font-bold text-gray-800 mb-4">
            –ö–≤–∏–∑ –Ω–∞ –¥—Ä—É–∂–±—É ü§ù
          </h2>
          <p className="text-lg text-gray-600">
            –ü—Ä–æ–≤–µ—Ä–∏–º, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ –≤—ã –∑–Ω–∞–µ—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞!
          </p>
        </div>

        {!showResult ? (
          <Card className="p-8 bg-white shadow-xl">
            <div className="mb-6">
              <div className="flex justify-between items-center mb-2">
                <span className="text-sm text-gray-500">
                  –í–æ–ø—Ä–æ—Å {currentQuestion + 1} –∏–∑ {questions.length}
                </span>
                <span className="text-sm text-purple-600 font-medium">
                  –û—á–∫–∏: {score}
                </span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div
                  className="bg-gradient-to-r from-purple-500 to-pink-500 h-2 rounded-full transition-all duration-500"
                  style={{ width: `${progress}%` }}
                />
              </div>
            </div>

            <div className="text-center mb-8">
              <h3 className="text-xl font-bold text-gray-800 mb-6">
                {questions[currentQuestion].question}
              </h3>
            </div>

            <div className="space-y-3">
              {questions[currentQuestion].options.map((option, index) => (
                <Button
                  key={index}
                  onClick={() => handleAnswer(index)}
                  variant="outline"
                  className="w-full p-4 text-left justify-start hover:bg-purple-50 hover:border-purple-300 transition-all duration-200 hover:scale-105"
                >
                  {option}
                </Button>
              ))}
            </div>
          </Card>
        ) : (
          <Card className="p-8 bg-white shadow-xl text-center">
            <div className="text-6xl mb-4">{result.emoji}</div>
            <h3 className="text-2xl font-bold text-gray-800 mb-4">
              {result.title}
            </h3>
            <p className="text-lg text-gray-600 mb-6">{result.message}</p>
            <div className="bg-gradient-to-r from-purple-100 to-pink-100 rounded-lg p-4 mb-6">
              <p className="text-lg font-medium text-gray-800">
                –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <span className="text-purple-600">{score}</span>{" "}
                –∏–∑ {questions.length * 3} –æ—á–∫–æ–≤
              </p>
            </div>
            <Button
              onClick={resetQuiz}
              className="bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white px-8 py-3"
            >
              –ü—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑ üîÑ
            </Button>
          </Card>
        )}
      </div>
    </section>
  );
};

export default QuizSection;
